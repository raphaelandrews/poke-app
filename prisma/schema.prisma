// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?   @unique
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  avatarId String? @db.ObjectId
  avatar   Avatar? @relation(fields: [avatarId], references: [id])

  accounts       Account[]
  caughtPokemons CaughtPokemon[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Avatar {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  users User[]
}

model CaughtPokemon {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  level          Int    @default(1)
  xp             Int    @default(1)
  hp             Int
  attack         Int
  defense        Int
  specialAttack  Int
  specialDefense Int
  speed          Int

  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  pokemonId String  @db.ObjectId
  pokemon   Pokemon @relation(fields: [pokemonId], references: [id], onDelete: Cascade)
}

model Pokemon {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  name           String @unique
  description    String
  height         String
  weight         String
  level          Int    @default(1)
  xp             Int    @default(1)
  hp             Int
  attack         Int
  defense        Int
  specialAttack  Int
  specialDefense Int
  speed          Int
  sprite         String
  thumbnail      String

  previousEvolution   Pokemon[] @relation("PokemonPreviousEvolution", fields: [nextEvolutionId], references: [id])
  previousEvolutions  Pokemon[] @relation("PokemonPreviousEvolution", fields: [previousEvolutionId], references: [id])
  previousEvolutionId String[]  @default([]) @db.ObjectId

  nextEvolution   Pokemon[] @relation("PokemonNextEvolution", fields: [previousEvolutionId], references: [id])
  nextEvolutions  Pokemon[] @relation("PokemonNextEvolution", fields: [nextEvolutionId], references: [id])
  nextEvolutionId String[]  @default([]) @db.ObjectId

  typeId       String[]            @default([]) @db.ObjectId
  types        PokemonType[]       @relation(fields: [typeId], references: [id])
  eggId        String[]            @default([]) @db.ObjectId
  eggs         PokemonEgg[]        @relation(fields: [eggId], references: [id])
  abilityId    String[]            @default([]) @db.ObjectId
  abilities    PokemonAbility[]    @relation(fields: [abilityId], references: [id])

  generationId String?            @db.ObjectId
  generations  PokemonGeneration? @relation(fields: [generationId], references: [id], onDelete: Cascade)
  speciesId    String?            @db.ObjectId
  species      PokemonSpecies?    @relation(fields: [speciesId], references: [id], onDelete: Cascade)

  caughtPokemons CaughtPokemon[]
}

model PokemonGeneration {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  generation String

  pokemons Pokemon[]
}

model PokemonEgg {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  pokemonId String[]  @default([]) @db.ObjectId
  pokemons  Pokemon[] @relation(fields: [pokemonId], references: [id])
}

model PokemonAbility {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  pokemonId String[]  @default([]) @db.ObjectId
  pokemons  Pokemon[] @relation(fields: [pokemonId], references: [id])
}

model PokemonSpecies {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  pokemons Pokemon[]
}

model PokemonType {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  resistance   PokemonType[] @relation("TypesResistance", fields: [weaknessId], references: [id])
  resistances  PokemonType[] @relation("TypesResistance", fields: [resistanceId], references: [id])
  resistanceId String[]      @default([]) @db.ObjectId

  weakness   PokemonType[] @relation("Typesweakness", fields: [resistanceId], references: [id])
  weaknesses PokemonType[] @relation("Typesweakness", fields: [weaknessId], references: [id])
  weaknessId String[]      @default([]) @db.ObjectId

  pokemonId String[]  @default([]) @db.ObjectId
  pokemons  Pokemon[] @relation(fields: [pokemonId], references: [id])
}
